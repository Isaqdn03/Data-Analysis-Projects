-- =====================================================
-- BOOK DATABASE ANALYSIS - SQL QUERIES
-- =====================================================
-- Analysis of book service database to understand market trends
-- during COVID-19 and develop competitive product insights
-- =====================================================

-- =====================================================
-- DATA EXPLORATION QUERIES
-- =====================================================

-- View table structures
PRAGMA table_info(books);
PRAGMA table_info(authors);
PRAGMA table_info(publishers);
PRAGMA table_info(ratings);
PRAGMA table_info(reviews);

-- Sample data from each table
SELECT * FROM books LIMIT 5;
SELECT * FROM authors LIMIT 5;
SELECT * FROM publishers LIMIT 5;
SELECT * FROM ratings LIMIT 5;
SELECT * FROM reviews LIMIT 5;

-- Row counts for each table
SELECT 'books' as table_name, COUNT(*) as row_count FROM books
UNION ALL
SELECT 'authors', COUNT(*) FROM authors
UNION ALL
SELECT 'publishers', COUNT(*) FROM publishers
UNION ALL
SELECT 'ratings', COUNT(*) FROM ratings
UNION ALL
SELECT 'reviews', COUNT(*) FROM reviews;

-- =====================================================
-- DATA QUALITY CHECKS
-- =====================================================

-- Check for NULL values in critical fields
SELECT 
    'books' as table_name,
    SUM(CASE WHEN book_id IS NULL THEN 1 ELSE 0 END) as null_book_id,
    SUM(CASE WHEN title IS NULL THEN 1 ELSE 0 END) as null_title,
    SUM(CASE WHEN author_id IS NULL THEN 1 ELSE 0 END) as null_author_id,
    SUM(CASE WHEN publisher_id IS NULL THEN 1 ELSE 0 END) as null_publisher_id,
    SUM(CASE WHEN publication_date IS NULL THEN 1 ELSE 0 END) as null_pub_date,
    SUM(CASE WHEN num_pages IS NULL THEN 1 ELSE 0 END) as null_pages
FROM books;

-- Check referential integrity - Books without valid authors
SELECT COUNT(*) as orphaned_books
FROM books b
LEFT JOIN authors a ON b.author_id = a.author_id
WHERE a.author_id IS NULL;

-- Check referential integrity - Books without valid publishers
SELECT COUNT(*) as orphaned_books
FROM books b
LEFT JOIN publishers p ON b.publisher_id = p.publisher_id
WHERE p.publisher_id IS NULL;

-- Check referential integrity - Ratings for non-existent books
SELECT COUNT(*) as orphaned_ratings
FROM ratings r
LEFT JOIN books b ON r.book_id = b.book_id
WHERE b.book_id IS NULL;

-- Check referential integrity - Reviews for non-existent books
SELECT COUNT(*) as orphaned_reviews
FROM reviews r
LEFT JOIN books b ON r.book_id = b.book_id
WHERE b.book_id IS NULL;

-- Validate rating scale
SELECT 
    MIN(rating) as min_rating, 
    MAX(rating) as max_rating,
    AVG(rating) as avg_rating,
    COUNT(DISTINCT rating) as unique_rating_values,
    COUNT(*) as total_ratings
FROM ratings;

-- Check for duplicate ratings (same user rating same book multiple times)
SELECT 
    username, 
    book_id, 
    COUNT(*) as rating_count
FROM ratings
GROUP BY username, book_id
HAVING COUNT(*) > 1
ORDER BY rating_count DESC
LIMIT 10;

-- =====================================================
-- TASK 1: Books Published After January 1, 2000
-- =====================================================
-- Objective: Count modern books to understand catalog scope

-- Main query
SELECT COUNT(*) as books_after_2000
FROM books
WHERE publication_date > '2000-01-01';

-- Extended analysis: Distribution by era
SELECT 
    CASE 
        WHEN publication_date <= '2000-01-01' THEN 'Before 2000'
        ELSE 'After 2000'
    END as era,
    COUNT(*) as book_count,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM books), 2) as percentage
FROM books
GROUP BY era
ORDER BY era DESC;

-- Yearly publication trends (last 10 years if after 2010)
SELECT 
    strftime('%Y', publication_date) as year,
    COUNT(*) as books_published
FROM books
WHERE publication_date >= '2010-01-01'
GROUP BY year
ORDER BY year DESC;

-- =====================================================
-- TASK 2: Reviews and Average Ratings per Book
-- =====================================================
-- Objective: Analyze engagement metrics for each book

-- Main query with comprehensive metrics
SELECT 
    b.book_id,
    b.title,
    a.author,
    COUNT(DISTINCT r.rating_id) as review_count,
    ROUND(AVG(r.rating), 2) as avg_rating,
    MIN(r.rating) as min_rating,
    MAX(r.rating) as max_rating,
    COUNT(DISTINCT r.username) as unique_raters
FROM books b
LEFT JOIN authors a ON b.author_id = a.author_id
LEFT JOIN ratings r ON b.book_id = r.book_id
GROUP BY b.book_id, b.title, a.author
ORDER BY review_count DESC, avg_rating DESC;

-- Summary statistics
SELECT 
    COUNT(DISTINCT b.book_id) as total_books,
    COUNT(DISTINCT CASE WHEN r.rating_id IS NOT NULL THEN b.book_id END) as books_with_ratings,
    COUNT(DISTINCT CASE WHEN r.rating_id IS NULL THEN b.book_id END) as books_without_ratings,
    AVG(rating_count) as avg_ratings_per_book,
    MAX(rating_count) as max_ratings_for_a_book
FROM books b
LEFT JOIN (
    SELECT book_id, COUNT(*) as rating_count
    FROM ratings
    GROUP BY book_id
) r ON b.book_id = r.book_id;

-- Rating distribution
SELECT 
    rating,
    COUNT(*) as count,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM ratings), 2) as percentage
FROM ratings
GROUP BY rating
ORDER BY rating;

-- =====================================================
-- TASK 3: Top Publisher by Books > 50 Pages
-- =====================================================
-- Objective: Identify major publishers excluding short publications

-- Main query - Top publishers
SELECT 
    p.publisher,
    COUNT(*) as book_count,
    AVG(b.num_pages) as avg_pages,
    MIN(b.num_pages) as min_pages,
    MAX(b.num_pages) as max_pages,
    SUM(b.num_pages) as total_pages_published
FROM books b
JOIN publishers p ON b.publisher_id = p.publisher_id
WHERE b.num_pages > 50
GROUP BY p.publisher
ORDER BY book_count DESC
LIMIT 10;

-- Market share analysis (top 10 publishers)
WITH publisher_counts AS (
    SELECT 
        p.publisher,
        COUNT(*) as book_count
    FROM books b
    JOIN publishers p ON b.publisher_id = p.publisher_id
    WHERE b.num_pages > 50
    GROUP BY p.publisher
)
SELECT 
    publisher,
    book_count,
    ROUND(book_count * 100.0 / SUM(book_count) OVER(), 2) as market_share_percent
FROM publisher_counts
ORDER BY book_count DESC
LIMIT 10;

-- =====================================================
-- TASK 4: Author with Highest Average Rating (50+ ratings)
-- =====================================================
-- Objective: Find most acclaimed author with sufficient rating volume

-- Main query - Top rated authors
WITH author_ratings AS (
    SELECT 
        a.author,
        a.author_id,
        COUNT(r.rating_id) as total_ratings,
        ROUND(AVG(r.rating), 3) as avg_rating,
        COUNT(DISTINCT b.book_id) as book_count,
        MIN(r.rating) as worst_rating,
        MAX(r.rating) as best_rating
    FROM authors a
    JOIN books b ON a.author_id = b.author_id
    JOIN ratings r ON b.book_id = r.book_id
    GROUP BY a.author_id, a.author
    HAVING COUNT(r.rating_id) >= 50
)
SELECT *
FROM author_ratings
ORDER BY avg_rating DESC, total_ratings DESC
LIMIT 20;

-- Distribution of ratings for top author
WITH top_author AS (
    SELECT 
        a.author_id,
        a.author
    FROM authors a
    JOIN books b ON a.author_id = b.author_id
    JOIN ratings r ON b.book_id = r.book_id
    GROUP BY a.author_id, a.author
    HAVING COUNT(r.rating_id) >= 50
    ORDER BY AVG(r.rating) DESC
    LIMIT 1
)
SELECT 
    ta.author,
    r.rating,
    COUNT(*) as count
FROM top_author ta
JOIN books b ON ta.author_id = b.author_id
JOIN ratings r ON b.book_id = r.book_id
GROUP BY ta.author, r.rating
ORDER BY r.rating;

-- =====================================================
-- TASK 5: Average Reviews from Heavy Raters (50+ books)
-- =====================================================
-- Objective: Understand engagement patterns of power users

-- Main query - Heavy user analysis
WITH heavy_users AS (
    SELECT username
    FROM ratings
    GROUP BY username
    HAVING COUNT(DISTINCT book_id) > 50
),
user_activity AS (
    SELECT 
        hu.username,
        COUNT(DISTINCT r.book_id) as books_rated,
        COUNT(DISTINCT rev.review_id) as reviews_written,
        ROUND(AVG(r.rating), 2) as avg_rating_given
    FROM heavy_users hu
    JOIN ratings r ON hu.username = r.username
    LEFT JOIN reviews rev ON hu.username = rev.username
    GROUP BY hu.username
)
SELECT 
    COUNT(*) as heavy_user_count,
    AVG(books_rated) as avg_books_rated,
    AVG(reviews_written) as avg_reviews_written,
    AVG(avg_rating_given) as avg_rating_given,
    MIN(reviews_written) as min_reviews,
    MAX(reviews_written) as max_reviews,
    STDEV(reviews_written) as stdev_reviews
FROM user_activity;

-- Heavy user engagement breakdown
WITH heavy_users AS (
    SELECT username
    FROM ratings
    GROUP BY username
    HAVING COUNT(DISTINCT book_id) > 50
)
SELECT 
    CASE 
        WHEN rev.review_id IS NOT NULL THEN 'Ratings + Reviews'
        ELSE 'Ratings Only'
    END as engagement_type,
    COUNT(DISTINCT r.username) as user_count,
    AVG(r.rating) as avg_rating
FROM heavy_users hu
JOIN ratings r ON hu.username = r.username
LEFT JOIN reviews rev ON r.username = rev.username AND r.book_id = rev.book_id
GROUP BY engagement_type;

-- Top 10 most active users
SELECT 
    username,
    COUNT(DISTINCT book_id) as books_rated,
    COUNT(DISTINCT CASE WHEN rating = 5 THEN book_id END) as five_star_ratings,
    COUNT(DISTINCT CASE WHEN rating = 1 THEN book_id END) as one_star_ratings,
    ROUND(AVG(rating), 2) as avg_rating
FROM ratings
GROUP BY username
ORDER BY books_rated DESC
LIMIT 10;

-- =====================================================
-- ADDITIONAL BUSINESS INTELLIGENCE QUERIES
-- =====================================================

-- Publisher performance by ratings
SELECT 
    p.publisher,
    COUNT(DISTINCT b.book_id) as total_books,
    COUNT(r.rating_id) as total_ratings,
    ROUND(AVG(r.rating), 2) as avg_rating,
    ROUND(COUNT(r.rating_id) * 1.0 / COUNT(DISTINCT b.book_id), 1) as ratings_per_book
FROM publishers p
JOIN books b ON p.publisher_id = b.publisher_id
LEFT JOIN ratings r ON b.book_id = r.book_id
GROUP BY p.publisher
HAVING COUNT(DISTINCT b.book_id) >= 10
ORDER BY avg_rating DESC, total_books DESC
LIMIT 20;

-- Genre analysis (if title patterns indicate genre)
-- This is a simplified example - adjust based on actual data
SELECT 
    CASE 
        WHEN LOWER(title) LIKE '%love%' OR LOWER(title) LIKE '%heart%' THEN 'Romance'
        WHEN LOWER(title) LIKE '%murder%' OR LOWER(title) LIKE '%death%' THEN 'Mystery'
        WHEN LOWER(title) LIKE '%war%' OR LOWER(title) LIKE '%history%' THEN 'History'
        WHEN LOWER(title) LIKE '%science%' OR LOWER(title) LIKE '%space%' THEN 'Sci-Fi'
        ELSE 'Other'
    END as inferred_genre,
    COUNT(*) as book_count,
    AVG(r.rating) as avg_rating
FROM books b
LEFT JOIN ratings r ON b.book_id = r.book_id
GROUP BY inferred_genre
ORDER BY book_count DESC;

-- Monthly user engagement trends (if rating dates available)
-- Adjust date field based on actual schema
-- SELECT 
--     strftime('%Y-%m', rating_date) as month,
--     COUNT(DISTINCT username) as active_users,
--     COUNT(*) as total_ratings,
--     COUNT(DISTINCT book_id) as books_rated
-- FROM ratings
-- WHERE rating_date >= date('now', '-12 months')
-- GROUP BY month
-- ORDER BY month DESC;